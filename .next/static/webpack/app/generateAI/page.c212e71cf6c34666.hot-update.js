"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/generateAI/page",{

/***/ "(app-pages-browser)/./src/lib/ai-service.ts":
/*!*******************************!*\
  !*** ./src/lib/ai-service.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aiService: () => (/* binding */ aiService)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// AI Service - Automatic Configuration\nclass AIService {\n    loadConfig() {\n        // Load from environment variables automatically\n        const stabilityKey = \"sk-EbyLFvWn0wKLaQ2WjszoOB6uEhYsfdOHHgCHqxMTjKjHzbsp\";\n        const replicateKey = process.env.NEXT_PUBLIC_REPLICATE_API_KEY;\n        const openaiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY;\n        // Priority: Stability AI > Replicate > OpenAI > Demo\n        if (stabilityKey) {\n            return {\n                service: 'stability',\n                apiKey: stabilityKey,\n                endpoint: 'https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/image-to-image',\n                isConfigured: true\n            };\n        } else if (replicateKey) {\n            return {\n                service: 'replicate',\n                apiKey: replicateKey,\n                endpoint: 'https://api.replicate.com/v1/predictions',\n                isConfigured: true\n            };\n        } else if (openaiKey) {\n            return {\n                service: 'openai',\n                apiKey: openaiKey,\n                endpoint: 'https://api.openai.com/v1/images/generations',\n                isConfigured: true\n            };\n        }\n        // Fallback to demo mode\n        return {\n            service: 'demo',\n            apiKey: '',\n            endpoint: '',\n            isConfigured: false\n        };\n    }\n    async generateFoxPerson(imageBlob, prompt, strength) {\n        try {\n            if (!this.config.isConfigured) {\n                throw new Error('No AI service configured');\n            }\n            console.log(\"Using \".concat(this.config.service, \" service\"));\n            switch(this.config.service){\n                case 'stability':\n                    return await this.generateWithStability(imageBlob, prompt, strength);\n                case 'replicate':\n                    return await this.generateWithReplicate(imageBlob, prompt, strength);\n                case 'openai':\n                    return await this.generateWithOpenAI(imageBlob, prompt, strength);\n                default:\n                    throw new Error('Unsupported service');\n            }\n        } catch (error) {\n            console.error('AI generation error:', error);\n            throw error;\n        }\n    }\n    async generateWithStability(imageBlob, prompt, strength) {\n        const formData = new FormData();\n        formData.append('init_image', imageBlob, 'input.jpg');\n        const enhancedPrompt = \"Transform this person into a beautiful fox person: \".concat(prompt, \", anthropomorphic fox, detailed orange fur, pointy fox ears, bushy fox tail, human-like body, high quality, detailed, professional photography\");\n        formData.append('text_prompts[0][text]', enhancedPrompt);\n        formData.append('text_prompts[0][weight]', '1');\n        formData.append('text_prompts[1][text]', 'low quality, blurry, distorted, bad anatomy, deformed, ugly, bad proportions');\n        formData.append('text_prompts[1][weight]', '-1');\n        formData.append('cfg_scale', '7.5');\n        formData.append('steps', '30');\n        formData.append('samples', '1');\n        formData.append('style_preset', 'photographic');\n        const response = await fetch(this.config.endpoint, {\n            method: 'POST',\n            headers: {\n                'Authorization': \"Bearer \".concat(this.config.apiKey),\n                'Accept': 'application/json'\n            },\n            body: formData\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\"Stability AI failed: \".concat(response.status, \" - \").concat(errorText));\n        }\n        const result = await response.json();\n        if (result.artifacts && result.artifacts.length > 0) {\n            return \"data:image/png;base64,\".concat(result.artifacts[0].base64);\n        } else {\n            throw new Error('No image generated');\n        }\n    }\n    async generateWithReplicate(imageBlob, prompt, strength) {\n        // Convert blob to base64\n        const base64 = await this.blobToBase64(imageBlob);\n        const response = await fetch(this.config.endpoint, {\n            method: 'POST',\n            headers: {\n                'Authorization': \"Token \".concat(this.config.apiKey),\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                version: \"39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b\",\n                input: {\n                    image: base64,\n                    prompt: \"fox person: \".concat(prompt),\n                    strength: strength\n                }\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"Replicate failed: \".concat(response.status));\n        }\n        const result = await response.json();\n        return result.output[0]; // Replicate returns image URLs\n    }\n    async generateWithOpenAI(imageBlob, prompt, strength) {\n        const response = await fetch(this.config.endpoint, {\n            method: 'POST',\n            headers: {\n                'Authorization': \"Bearer \".concat(this.config.apiKey),\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                model: \"dall-e-3\",\n                prompt: \"Transform this person into a fox person with strength \".concat(strength, \": \").concat(prompt),\n                n: 1,\n                size: \"1024x1024\"\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"OpenAI failed: \".concat(response.status));\n        }\n        const result = await response.json();\n        return result.data[0].url; // OpenAI returns image URLs\n    }\n    blobToBase64(blob) {\n        return new Promise((resolve, reject)=>{\n            const reader = new FileReader();\n            reader.onload = ()=>{\n                const result = reader.result;\n                resolve(result.split(',')[1]); // Remove data:image/...;base64, prefix\n            };\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n        });\n    }\n    isConfigured() {\n        return this.config.isConfigured;\n    }\n    getServiceName() {\n        return this.config.service;\n    }\n    constructor(){\n        this.config = this.loadConfig();\n    }\n}\n// Export singleton instance\nconst aiService = new AIService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/ai-service.ts\n"));

/***/ })

});